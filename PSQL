---PSQL ELSŐ ÓRA---

1. HELLO WORLD!------------------------------------------------------------------------

begin
dbms_output.put_line('HELLO WORLD');
end;

VIEW -> DBMS OUTPUT -> MEGINT FUTTAT

2. MINDEN SOR KIÍR CIKLUSSAL:-------------------------------------------------------

begin
for i in (select * from SZERELO.sz_auto)
    loop
        dbms_output.put_line(i.rendszam);
    end loop;
end;

3. WHILE CIKLUS---------------------------------------------------------------------

declare
    i pls_integer:=1;
begin
while 10>i
    loop
        dbms_output.put_line(i);
        i:=i+i;
    end loop;
end;

//EZ UGYANAZ, CSAK ELVILEG SZEBB/JOBB

declare
    i pls_integer:=-1;
begin
    loop
        dbms_output.put_line(i);
        i:=i+1;
        exit when i>=10;
    end loop;
end;

4. KURZOR FOR CIKLUS-----------------------------------------------------------------
//Kiírja az országok nevét a listába

begin
for i in (select * from OLIMPIA.o_orszagok)
    loop
        dbms_output.put_line(i.orszag);
    end loop;
end;

5. ELÁGAZÁSOK--------------------------------------------------------------------------

begin
for i in (select * from OLIMPIA.o_orszagok)
    loop
        if i.foldresz='Európa'
            then dbms_output.put_line(i.orszag);
            elsif i.foldresz='Afrika'
                then dbms_output.put_line('Afrika'||' '||i.orszag);
            elsif i.terulet>10000
                then dbms_output.put_line('Nem európai ország'||' '||i.orszag||' '||i.terulet);
            else dbms_output.put_line('Nem európai ország');
        end if;
    end loop;
end;

6. UGYANEZ, CSAK BESZÚRÁSSAL--------------------------------------------------------------

begin
for i in (select * from OLIMPIA.o_orszagok)
    loop
        if i.foldresz='Európa'
            then insert into eu_orszagok values (i.orszag);
            elsif i.foldresz='Afrika'
                then insert into afrikai_orszagok values (i.orszag);
            elsif i.terulet>10000
                then dbms_output.put_line('Nem európai ország'||' '||i.orszag||' '||i.terulet);
            else dbms_output.put_line('Nem európai ország');
        end if;
    end loop;
commit;
end;

7. DELETE----------------------------------------------------------------------------

begin
delete from eu_orszagok;
delete from afrikai_orszagok;
for i in (select * from OLIMPIA.o_orszagok)
    loop
        if i.foldresz='Európa'
            then insert into eu_orszagok values (i.orszag);
            elsif i.foldresz='Afrika'
                then insert into afrikai_orszagok values (i.orszag);
            elsif i.terulet>10000
                then dbms_output.put_line('Nem európai ország'||' '||i.orszag||' '||i.terulet);
            else dbms_output.put_line('Nem európai ország');
        end if;
    end loop;
commit;
end;

8. ALPROGRAMOK-------------------------------------------------------------------

-FÜGGVÉNY (function)

    //Másold ki az órai anyagból, mert lemaradtál
    
-ELJÁRÁS (procedure)

    declare
    procedure proc_autok(p_szin szerelo.sz_auto.szin%type) is
    begin
    for i in (select * from SZERELO.sz_auto
              where szin=p_szin)
        loop
            dbms_output.put_line(i.rendszam);
        end loop;
    end;

begin
proc_autok('piros');
end;
    
9. TÁROLT FÜGGVÉNY/ELJÁRÁS-------------------------------------------------------   

//rövid dbms_output.putline();
create or replace procedure dopl(p varchar2) is
begin
dbms_output.put_line(p);
end;

//szorzás
create or replace function func_multiply(p_a number, p_b number) return number is
begin
return p_a*p_b;
end;

// hívható sql-ből is
select func_multiply(5,2)
from dual;

10. OUT -> belül kap értéket

11. KIVÉTELKEZELÉS--------------------------------------------------------------------

//neten megkeresni a kivétel számát és azt írni az exception után

begin
dopl(1/0);
exception
    when zero_divide
    then dopl('0-val osztottunk');
end;

//or-ral lehet több kivételt adni

begin
dopl(1/0);
exception
    when zero_divide or value_error
    then dopl('0-val osztottunk');
end;

//when others - minden másat lekezel 

begin
dopl(1/0);
exception
    when zero_divide or value_error
    then dopl('0-val osztottunk');
    when others
    then dopl('HIBA');
end;

12. NEM BEÉPÍTETT--------------------------------------------------------------------------

declare
    ex exception;
    pragma exception_init(ex, -1400);
    ex2 exception;
    pragma exception_init(ex, -1438);
begin
insert into szamok values (100);
exception
    when ex
    then dopl('Nem lehet null');
    when ex2
    then dopl('Túl hosszú szám');
end;

13. KIVÉTEL ELDOBÁS---------------------------------------------------------------------

//create or replace procedure proc_kiv is
begin
raise_application_error(-20005, 'Saját hibaüzenet');
/* -20000....20999 lehet */
end;

14. SELECT INTO--------------------------------------------------------------------------------------
declare
    v konyvtar.tag%rowtype;
begin
select *
into v
from KONYVTAR.tag
where keresztnev='nincs';
dopl(v.vezeteknev||' '||v.keresztnev);
exception
    when no_data_found
    then dopl('Nincs ilyen név');
    when too_many_rows
    then dopl('Túl sok ilyen név van');
end;

FELADAT:---------------------------------------------------------------------------------------------
    Írjunk tárolt függvényt, amely paraméterként kapott tulajdonos névhez visszaadja a tulaj azon-t;
    Ha nincs ilyen név, akkor null értéket ad vissza.
    Ha túl sok ilyen név van, akkor felhasználói kivételt dob.
    
    Hívjuk meg a függvényt
    
create or replace function f_tulaj2(
    p_nev szerelo.sz_tulajdonos.nev%type)
    return szerelo.sz_tulajdonos.azon%type is
    v_tulaj_azon szerelo.sz_tulajdonos.azon%type;
begin
select azon
into v_tulaj_azon
from szerelo.sz_tulajdonos
where nev=p_nev;
return v_tulaj_azon;
exception
    when no_data_found then return null;
    when too_many_rows
    then raise_application_error
        (-20001, 'Sok ilyen tulaj van');
end;
    
15. NATÍV DINAMIKUS SQL------------------------------------------------------------------------------
//execute immediate 'STRING' -> amit ezután írok, az stringként lefut

begin
execute immediate 'create table szamok2 (sz number(2))';
end;

begin
for i in 1..10
loop
execute immediate 'create table szamok1'||i||' (sz number(2))';
end loop;
end;

create or replace procedure
    proc_szam_insert(p_tabla number, p_ertek number) is
    begin
    execute immediate
    'insert into szamok1'||p_tabla||
    'values ('||p_ertek||')';
    
    end;


























